/* 
 * client-challenge.c  
 *
 * usage: client-challenge <host> <port>
 *
 * compile: 
 *    gcc -g -fno-stack-protector client-challenge.c -o client-challenge
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h> 
#include <ctype.h>

#define BUFSIZE 1024

/* 
 * error - wrapper for perror
 */
void error(char *msg) {
    perror(msg);
    exit(0);
}

int createCliSocket(char *hostn, int port)
{
    int sfd, n;
    struct sockaddr_in saddr;
    struct hostent *server;
    
    /* socket: create the socket */
    sfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sfd < 0) 
        error("ERROR opening socket");

    /* gethostbyname: get the server's DNS entry */
    server = gethostbyname(hostn);
    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host as %s\n", hostn);
        exit(0);
    }

    /* build the server's Internet address */
    bzero((char *) &saddr, sizeof(saddr));
    saddr.sin_family = AF_INET;
    bcopy((char *)server->h_addr, (char *)&saddr.sin_addr.s_addr, server->h_length);
    saddr.sin_port        = htons(port);

    /* connect: create a connection with the server */
    if (connect(sfd, (const struct sockaddr *) &saddr, sizeof(saddr)) < 0) 
      error("ERROR connecting");

    return sfd;
}

/******************************************************
 * handleWrite()
 ******************************************************/
void handleWrite(int sfd, FILE *input) {
    int n, i, k, size;
    char buf[BUFSIZE];
    char buf1[BUFSIZE];
    char msg[BUFSIZE];

    /* get message line from the user */
    printf("Please provide data to write (if address, start with 0x): ");
    bzero(buf, BUFSIZE);
    fgets(buf, BUFSIZE, input);

    if ((buf[0] == '0') && (buf[1] == 'x')) {
        k = 0;  
        i = 2;
        while (((i + 8) < BUFSIZE) && (buf[i] != '\n') && (buf[i+1] != '\n')) {
            buf1[0] = buf[i];
            buf1[1] = buf[i+1];
            buf1[2] = '\0';
            buf[k] = (char) strtol(buf1, NULL, 16);
            k++;
            i += 2;
        }
        while (k < 8) {
            buf[k] = 0x00;
            k++;
        }
        size = 8;
    }
    else size = strlen(buf);

    /* write: send the message line to the server */
    n = write(sfd, buf, size );
    if (n < 0) 
        error("ERROR writing to socket");

    /* read: print the server's reply */
    bzero(msg, BUFSIZE);
    n = read(sfd, msg, BUFSIZE);
    if (n < 0) 
        error("ERROR reading from socket");      

    printf("%s\n\n", msg);
}

/******************************************************
 * main()
 ******************************************************/

int main(int argc, char **argv) {
    int i, sfd, port, n, nbytes, stop = 0;
    char *hostname;
    char *p;
    char buf[BUFSIZE];
    char buf1[BUFSIZE];
    char msg[BUFSIZE];
    FILE *input;


    /* check command line arguments */
    if (argc != 3) {
       fprintf(stderr,"usage: %s <hostname> <port>\n", argv[0]);
       exit(0);
    }
    hostname = argv[1];
    port = atoi(argv[2]);

    /* Create the socket */
    sfd = createCliSocket(hostname, port);

    /* Setup the input stream */
    input = stdin;

    /* Read initial info from server */
    bzero(msg, BUFSIZE);
    n = read(sfd, msg, BUFSIZE);
    if (n < 0) 
        error("ERROR reading from socket");      

    printf("\n%s\n", msg);

    while (!stop) {
        
        /* get message line from the user */
        printf("Please provide data: ");
        bzero(buf, BUFSIZE);
        fgets(buf, BUFSIZE, input);

        /* write: send the message line to the server */
        n = write(sfd, buf, strlen(buf) );
        if (n < 0) 
          error("ERROR writing to socket");

        /* read: print the server's reply */
        bzero(msg, BUFSIZE);
        n = read(sfd, msg, BUFSIZE);
        if (n < 0) 
          error("ERROR reading from socket");      

        printf("%s\n\n", msg);

        if (buf[0] == '3')
            handleWrite(sfd, input);
    }

    printf("Time to finish!\n");
    close(sfd);
    return 0;
}
